package main

import (
	"bytes"
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"strings"
	"text/template"
	"unicode"

	"github.com/GGP1/kure/commands/root"

	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

// Utils to help developers update Kure's documentation.
// Remember to update the wiki if necessary.
// go run main.go [flags] [args]

func main() {
	cmd := flag.Bool("cmd", false, "specific command documentation")
	summ := flag.Bool("summary", false, "commands summary")
	flag.Parse()

	if *cmd {
		if err := cmdDocs(os.Args); err != nil {
			log.Fatalf("failed generating %s documentation: %v", os.Args[1], err)
		}
	} else if *summ {
		if err := summary(os.Args); err != nil {
			log.Fatalf("failed generating commands summary: %v", err)
		}
	}
}

// Generate a command's documentation.
//
// The output generated by this command is exactly what we would expect
// in most cases but not in all of them, as some commands' documentation
// contain extra information that can't be extracted from cobra (or little tweaks
// depending on each case).
//
// Please make sure not to overwrite that information in those specific cases.
//
// Usage: main --cmd ls.
func cmdDocs(args []string) error {
	root := root.DevCmd()

	cmd, _, err := root.Find(args[2:])
	if err != nil {
		return err
	}

	return customMarkdown(cmd, os.Stdout)
}

// customMarkdown creates custom markdown output.
func customMarkdown(cmd *cobra.Command, w io.Writer) error {
	funcs := template.FuncMap{
		"sub": func(a, b int) int {
			return a - b
		},
		"replace": func(s, old, new string, n int) string {
			return strings.Replace(s, old, new, n)
		},
		"visitFlags": func(cmd *cobra.Command) string {
			return visitFlags(cmd)
		},
		"visitFlagsTable": func(cmd *cobra.Command) string {
			buf := new(bytes.Buffer)
			cmd.Flags().VisitAll(func(f *pflag.Flag) {
				// Uppercase the first letter only
				usage := []byte(f.Usage)
				usage[0] = byte(unicode.ToUpper(rune(usage[0])))

				buf.WriteString(fmt.Sprintf("| %s | %s | %s | %s | %s |\n", f.Name, f.Shorthand, f.Value.Type(), f.DefValue, usage))
			})
			return buf.String()
		},
		"getURL": func(cmd *cobra.Command) string {
			return getURL(cmd)
		},
		"split": func(s, sep string) []string {
			return strings.Split(s, sep)
		},
		"hasPrefix": func(s, prefix string) bool {
			return strings.HasPrefix(s, prefix)
		},
	}
	t := template.Must(template.New("cmd.go.tpl").
		Funcs(funcs).
		ParseFiles("./templates/cmd.go.tpl"))
	return t.Execute(w, cmd)
}

func getURL(cmd *cobra.Command) string {
	url := "https://github.com/GGP1/kure/tree/master/docs/commands/"

	split := strings.Split(cmd.CommandPath(), " ")
	for _, s := range split[1:] {
		url += s + "/subcommands/"
	}

	return url
}

func visitFlags(cmd *cobra.Command) string {
	buf := new(bytes.Buffer)
	cmd.Flags().VisitAll(func(f *pflag.Flag) {
		var shorthand string
		if f.Shorthand != "" {
			shorthand = fmt.Sprintf("-%s ", f.Shorthand)
		}
		buf.WriteString(fmt.Sprintf("[%s%s] ", shorthand, f.Name))
	})
	return buf.String()
}

// Generate the wiki commands' summary page.
// https://www.github.com/kure/wiki/Commands-summary
//
// Usage: main --summary.
func summary(args []string) error {
	cmdAndFlags := func(c *cobra.Command) string {
		buf := new(bytes.Buffer)
		buf.WriteString(c.Use)
		buf.WriteByte(' ')
		buf.WriteString(visitFlags(c))
		return buf.String()
	}
	// Write subcommands and flags using recursion
	var subCmds func(cmd *cobra.Command, indent string) string
	subCmds = func(cmd *cobra.Command, indent string) string {
		buf := new(bytes.Buffer)
		// Add indent on each call
		indent += "    "
		for _, sub := range cmd.Commands() {
			buf.WriteString("\n")
			buf.WriteString(indent)
			buf.WriteString(cmdAndFlags(sub))
			buf.WriteString(subCmds(sub, indent))
		}
		return buf.String()
	}

	root := root.DevCmd()
	funcs := template.FuncMap{
		"cmdAndFlags": func(cmd *cobra.Command) string {
			return cmdAndFlags(cmd)
		},
		"subCmds": func(cmd *cobra.Command, indent string) string {
			return subCmds(cmd, indent)
		},
	}
	t := template.Must(template.New("summary.go.tpl").
		Funcs(funcs).
		ParseFiles("./templates/summary.go.tpl"))
	return t.Execute(os.Stdout, root)
}
